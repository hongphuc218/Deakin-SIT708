package com.example.taskmanagementapp

import android.app.DatePickerDialog
import android.os.Bundle
import android.widget.Button
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.example.taskmanagementapp.data.Task
import com.example.taskmanagementapp.data.TaskDatabase
import com.google.android.material.textfield.TextInputLayout
import java.util.*
import kotlinx.coroutines.launch

class AddTaskActivity : AppCompatActivity() {

    private lateinit var taskTitle: TextInputLayout
    private lateinit var taskDescription: TextInputLayout
    private lateinit var taskDate: TextInputLayout
    private lateinit var saveTaskButton: Button
    private lateinit var cancelTaskButton: Button
    private lateinit var datePickerButton: Button // Use the button for date picker

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        supportActionBar?.hide()
        setContentView(R.layout.add_task)

        // Initialize views
        taskTitle = findViewById(R.id.taskTitle)
        taskDescription = findViewById(R.id.taskDescription)
        taskDate = findViewById(R.id.taskDate)
        datePickerButton = findViewById(R.id.datePickerButton) // Reference to the date picker button
        saveTaskButton = findViewById(R.id.saveTask)
        cancelTaskButton = findViewById(R.id.cancelTask)

        // Set up Date Picker Dialog
        val calendar = Calendar.getInstance()
        val dateSetListener = DatePickerDialog.OnDateSetListener { view, year, month, dayOfMonth ->
            // Format the date as desired and set it to the button
            datePickerButton.text = "$dayOfMonth/${month + 1}/$year"
        }

        // Show Date Picker when clicked
        datePickerButton.setOnClickListener {
            DatePickerDialog(
                this@AddTaskActivity,
                dateSetListener,
                calendar.get(Calendar.YEAR),
                calendar.get(Calendar.MONTH),
                calendar.get(Calendar.DAY_OF_MONTH)
            ).show()
        }

        saveTaskButton.setOnClickListener {
            val title = taskTitle.editText?.text.toString()
            val description = taskDescription.editText?.text.toString()
            val date = datePickerButton.text.toString()

            // Validate input
            if (title.isEmpty() || description.isEmpty() || date.isEmpty() || date == "Select Date") {
                Toast.makeText(this, "Please fill all the fields", Toast.LENGTH_SHORT).show()
            } else {
                val newTask = Task(
                    title = title,
                    description = description,
                    dueDate = date,
                    id = 0, // ID will be auto-generated by Room
                    isDone = false
                )

                // Insert the task into the database
                insertTaskIntoDatabase(newTask)
            }
        }

        cancelTaskButton.setOnClickListener {
            finish()  // Close AddTaskActivity and return to the previous activity
        }
    }

    private fun insertTaskIntoDatabase(task: Task) {
        val taskDatabase = TaskDatabase.getDatabase(applicationContext)
        lifecycleScope.launch {
            taskDatabase.taskDao().insert(task)
            Toast.makeText(this@AddTaskActivity, "Task Saved!", Toast.LENGTH_SHORT).show()
            finish()  // Close the AddTaskActivity and go back to the main screen
        }
    }
}
